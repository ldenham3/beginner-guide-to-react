Notes (Named by video, file numbers do not match because video numbers are one ahead it seems. they all build on each other, new file every video)

-----------------------------------------------------------
2 (file 01): Create A User Inerface With Vanilla JS and DOM
-----------------------------------------------------------
need a div in the body, conventaionally id "root" where the application will be mounted
need a script with type text/javascript
need access to the root div inside the script, so a new variable
make a child element, add stuff to it
append the child element to the new variable that references the root div

recap: to create a UI in JS you need a place to append your js generated DOM elements, get access to that element with the document apis, create your own element, add properties, and then append that element to the root element

---------------------------------------------------------------
3 (file 02): Create User Inerface with Reacts createElement API
---------------------------------------------------------------
need react on the page. can get from npm, using unpkg (can get any file distributed on react) to get react and react dom as script tags. 
React creates elements, React-Dom renders them to the page
use ReactDOM.render to render elements to the page insread of append child. 
The element that we are renndering is no longer a DOM element created with the document (see: document.createElement()), it will be a React create element created with react
API is not the same as document: we do get to specify element type as the first argument but instead of getting an element and adding properties to it, we add them as an abject on creation. 
Example: First is creating an element with document, second is React, functionally equivalent: 
	
	```
	const element = document.createElement('div')
	element.textContent = 'Hello World'
	element.className = 'container'
	rootElement.appendChild(element)
	```

	```
	const element = React.createElement(
		'div', 
		{
			children: 'Hello World',
			className: 'container',
		}
	)
	ReactDOM.render(element, rootElement)
	```

textcontent for document is replaced with children for react
The react element is NOT a DOM node (can check with console.log), it is a Symbol(react.element) which tells react its a legit react element object. It will also specify type, which in this videos example is div (its the first argument) There are internal to react properties, props is the second argument we passed and its an object that holds an array of whatever we put in it.  You can use only two, however, you can pull out the children property and place it as a third argument and its the same. You can also have mutiple.
Example: first is 2 arguments with children property inside, the second is children as the third argument, the third is more than one child as the third argument, the fourth is using the second argument children property with an array to have more than one item. Functionally the same. I assume theres a reason down the line to use one or the other. 

	2 ARGS, CHILDREN IN SECOND WITH ONE ITEM
	```
	const element = React.createElement(
		'div', 
		{
			children: 'Hello World',
			className: 'container',
		}
	)
	```

	3 ARGS, CHILDREN IN THREE WITH ONE ITEM
	```
	const element = React.createElement(
		'div', 
		{
			className: 'container',
		}, 
		'Hello World',
	)
	```
	
	3 ARGS, CHILDREN AS THIRD ARG, MULTIPLE ITEMS
	```
	const element = React.createElement(
		'div', 
		{
			className: 'container',
		}, 
		'Hello World',
		', Goodbye World',
	)
	```

	2 ARGS, CHILDREN IN SECOND WITH MULTIPLE ITEMS
	```
	const element = React.createElement(
		'div', 
		{
			children: ['Hello World', ', Goodbye World'],
			className: 'container',
		}
	)
	```

If children is used in third argument and there is only one, it will be under props: children: in the console. If there are more then one, like the third block, then the props: children: will contain and array with each in it. Basically you can get your elements props to be children as an array.
ex: 
props:
children: Array(2)
0: "Hello World"
1: ", Goodbye World")

Children can be aditional react elements, though i am not sure yet if best practice is to put the children in arg 2 or 3. If you put it inside the children property at argument two, the tree looks like this (with the origional react obj having a children property, which then has a props property, which then has its own children where the info about the nested element is):

{$$typeof: Symbol(react.element), type: "div", key: null, ref: null, props: {…}, …}
$$typeof: Symbol(react.element)
key: null
props:
children:
$$typeof: Symbol(react.element)
key: null
props:
children: Array(2)
0: "Hello"
1: " World"
length: 2
__proto__: Array(0)
__proto__: Object
ref: null
type: "span"
_owner: null

Review: To create react elements and render them to the page you need to include react (to create elements) and react dom (to render the elements to the page), then get access to some element on the page (usually div with id root) so we can render elements to that DOM node. Then create react elemets (inside a script) then use ReactDOM.render to render our element to the root DOM node. 

-----------------------------------------------
4) (file 3) Create a UI with React's JSX System
-----------------------------------------------
Most people use JSX to create elements, which is an html like syntax for our JS. The browser cant read it natively
Without a translater this will cause an unexpected token error because the browser cant read jsx: 
	
	```
	const element = <div className="container">Hello World</div>
	```






















