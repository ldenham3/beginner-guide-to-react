Notes (Named by video, file numbers do not match because video numbers are one ahead it seems. they all build on each other, new file every video)

-----------------------------------------------------------
2 (file 01): Create A User Inerface With Vanilla JS and DOM
-----------------------------------------------------------
need a div in the body, conventaionally id "root" where the application will be mounted
need a script with type text/javascript
need access to the root div inside the script, so a new variable
make a child element, add stuff to it
append the child element to the new variable that references the root div

recap: to create a UI in JS you need a place to append your js generated DOM elements, get access to that element with the document apis, create your own element, add properties, and then append that element to the root element

---------------------------------------------------------------
3 (file 02): Create User Inerface with Reacts createElement API
---------------------------------------------------------------
need react on the page. can get from npm, using unpkg (can get any file distributed on react) to get react and react dom as script tags. 
React creates elements, React-Dom renders them to the page
use ReactDOM.render to render elements to the page insread of append child. 
The element that we are renndering is no longer a DOM element created with the document (see: document.createElement()), it will be a React create element created with react
API is not the same as document: we do get to specify element type as the first argument but instead of getting an element and adding properties to it, we add them as an abject on creation. 
Example: First is creating an element with document, second is React, functionally equivalent: 
	
	```
	const element = document.createElement('div')
	element.textContent = 'Hello World'
	element.className = 'container'
	rootElement.appendChild(element)
	```

	```
	const element = React.createElement(
		'div', 
		{
			children: 'Hello World',
			className: 'container',
		}
	)
	ReactDOM.render(element, rootElement)
	```

textcontent for document is replaced with children for react
The react element is NOT a DOM node (can check with console.log), it is a Symbol(react.element) which tells react its a legit react element object. It will also specify type, which in this videos example is div (its the first argument) There are internal to react properties, props is the second argument we passed and its an object that holds an array of whatever we put in it.  You can use only two, however, you can pull out the children property and place it as a third argument and its the same. You can also have mutiple.
Example: first is 2 arguments with children property inside, the second is children as the third argument, the third is more than one child as the third argument, the fourth is using the second argument children property with an array to have more than one item. Functionally the same. I assume theres a reason down the line to use one or the other. 

	2 ARGS, CHILDREN IN SECOND WITH ONE ITEM
	```
	const element = React.createElement(
		'div', 
		{
			children: 'Hello World',
			className: 'container',
		}
	)
	```

	3 ARGS, CHILDREN IN THREE WITH ONE ITEM
	```
	const element = React.createElement(
		'div', 
		{
			className: 'container',
		}, 
		'Hello World',
	)
	```
	
	3 ARGS, CHILDREN AS THIRD ARG, MULTIPLE ITEMS
	```
	const element = React.createElement(
		'div', 
		{
			className: 'container',
		}, 
		'Hello World',
		', Goodbye World',
	)
	```

	2 ARGS, CHILDREN IN SECOND WITH MULTIPLE ITEMS
	```
	const element = React.createElement(
		'div', 
		{
			children: ['Hello World', ', Goodbye World'],
			className: 'container',
		}
	)
	```

If children is used in third argument and there is only one, it will be under props: children: in the console. If there are more then one, like the third block, then the props: children: will contain and array with each in it. Basically you can get your elements props to be children as an array.
ex: 
props:
children: Array(2)
0: "Hello World"
1: ", Goodbye World")

Children can be aditional react elements, though i am not sure yet if best practice is to put the children in arg 2 or 3. If you put it inside the children property at argument two, the tree looks like this (with the origional react obj having a children property, which then has a props property, which then has its own children where the info about the nested element is):

{$$typeof: Symbol(react.element), type: "div", key: null, ref: null, props: {…}, …}
$$typeof: Symbol(react.element)
key: null
props:
children:
$$typeof: Symbol(react.element)
key: null
props:
children: Array(2)
0: "Hello"
1: " World"
length: 2
__proto__: Array(0)
__proto__: Object
ref: null
type: "span"
_owner: null

Review: To create react elements and render them to the page you need to include react (to create elements) and react dom (to render the elements to the page), then get access to some element on the page (usually div with id root) so we can render elements to that DOM node. Then create react elemets (inside a script) then use ReactDOM.render to render our element to the root DOM node. 

-----------------------------------------------
4) (file 3) Create a UI with React's JSX System
-----------------------------------------------
Most people use JSX to create elements, which is an html like syntax for our JS. The browser cant read it natively
Without a translater this will cause an unexpected token error because the browser cant read jsx: 
	
	```
	const element = <div className="container">Hello World</div>
	```

Getting bable (js compiler supporting next gen stuff like jsx) is a fucking nightmare so this lesson has it from unpkg which is bad and hopefully he eventually covers it. In browser bable transformer is apparelty 
Bable has a converter on the website so you can see it.
Script type must be text/babel for it to be grabbed by bable
A new script tag will show in the head of developer tools which is the compiled version of the code

Review: Author UI without React.createElement API and instead use JSX which is an html like syntax to author UI. To do this we need a compiler (transpiler?) like babel that will compile jsx to js so the browset can read it. Make sure to update the script types to text/babel, bable will look for them, compile them, and insert a new script that contains the compiled code.

---------------------------------
5) (file 4) Use JSX effectively with React
---------------------------------
Adding variables into param positions - make new variable and add the variable in {} ({} are used for interpolation - anything you put between the {} can be a js expression and whatever that expression evaluates to is the value that gets placed into the position for the react.createElement call)
Remove "" and use {} to tell the bable compiler we want whats inside to be evaluated as an expression
To check assignments, go to elements in dev tools and scroll down to the script, it will show what variable is being assigned to what
{} basically tell babel to leave it alone and pass it directly as the property that you pass for the props/children arguments
Children is just a special prop that you can provide as a shortcut/prop
You can use children the prop or add children as aditional arguments
JSX has self closing tags for divs
You can overwrite props, whatever comes last applies in event of conflict

Review: You can interpolate values with {} by putting any expression between the {} and have that expression passed along to the react.createElement API. Also you can spread props in the props position of a jsx element and they will be combined with the other props provided to that element in a declarative and deterministic way.

-----------------------------------------------------------------
6) (file 5) Render Two Elements Side By Side with React Fragments
-----------------------------------------------------------------
Putting 2 variables side bt side and passing them as the first argument is impossible. This in html:

	```
	<span>Hello</span>
	<span>World</span>
	```

...has no solution in react. So React has fragments. Fragment is aspecial type of element and no props needed, can just provide children. So this looks like this in React:

	```
	const element = (
		<React.Fragment>
			<span>Hello</span> <span>World</span>
		</React.Fragment>
	)
	```

Passes React.Fragment as the first argument to React.createElement behind the scenes, the tag names are being passed as a string as the first argument to another React.createElement. 
Apparently no one wants to use the React.createElement API directly so theres a solution in 05 but above is more conventional and cleaner with JSX
Fragments let us put things side by side without needing a container like a div - useful for things like tables that have a very specific structure. This is so common. there is a special syntax for it, you can remove the React.Fragment and just have open and close tags:
	
	```
	const element = (
		<>
			<span>Hello</span> <span>World</span>
		</>
	)
	```
Apparently babel 6 didnt have this shorthand, had to change to bable 7. file 05 on will use babel 7.8.3

-----------------------------------------------------
7) (file 06) Create a Simple Reusable React Component
-----------------------------------------------------
Functions needed to paramaterize. 
Arrow Functions: (Whatever ACCEPTEDPARAMETERS.VALUENAME is is what we will interpolate into the children prop for the div created [doesnt have to be a div, that was just the easiest way to lay it out])

	```
	const ELEMENTNAME = (ACCEPTEDPARAMETERS) => <div className="CLASSNAME">{ACCEPTEDPARAMETERS.VALUENAME}</div>

	call: 
	{ELEMENTNAME({VALUENAME: "whatever thing"})}
	```

If you call a function as a tag to render a React Component, it will be unrecignized unless you start its name with a capital letter. 
(Lots of notes in file 06, its confusing if you cant see it)
When you give a capital letter in JSX its the same as calling React.createElement with the function you are referencing, which allows you to make a custom component that you can reuse to use code over and over again. I think its basically a fuunction call? 
Yeah, see file 06 for this lesson.

Review: We had duplicated code, so in order to reuse code in multiple places we created our own custom function component which is a function that accepts a props object and returns more react elements. Make sure function component starts with a capital letter so that bable will compile it to pass the function itself to react.CreateElement rather than the string. (Still dont know why this is true, React magic I guess). That way when react renders our element it knows what function to call. 
















